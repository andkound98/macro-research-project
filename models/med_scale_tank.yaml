# med_scale_tank.yaml ---
#
# Description: a medium-scale two-agent NK model (TANK) with
# capital, capital adjustement costs, capital utilization costs and habits
# The original RANK version of the model is by Gregor Boehl, PhD
# This version of the model is by Andreas Koundouros
---

name: 'tank'
variables: [y, c, pi, R, Rn, Rk, beta, w, q, mc, k, i, n, hhdf, g, b, qb, t, ds, bprof, dd, MPK, cap_util, cap_util_costs, y_prod, chh, nhh, cuu, nuu, v, z, pitilde]
parameters: [ theta, kappa, psi, delta, alpha, Phi, phi_pi, phi_y, h, rho, eta, rho_beta, chi, par_cap_util1, lam, rho_m, rho_z, omega ]
shocks: [e_beta, e_m, e_z]

aux_equations: |
    par_cap_util0 = MPKSS

equations:
      # unconstrained households
    ~ w = chi*nuu**eta*(cuu - h*cuuLag)
    ~ 1 = R/piPrime*hhdf
    ~ hhdf = betaPrime*(cuu - h*cuuLag)/(cuuPrime - h*cuu)
    ~ dd + cuu + t + Phi/2*(i/iLag - 1)**2*i = w*nuu + RLag/pi*ddLag + (1 - mc - psi/2*(pi/pitildeLag - 1)**2)*y + (q*(1 - Phi/2*(i/iLag - 1)**2) - 1)*i + bprof
    
     # hand-to-mouth households
    ~ w = chi*nhh**eta*(chh - h*chhLag)
    ~ chh = w*nhh
    
     # aggregate consumption and labour hours
    ~ c = (1-lam)*cuu + lam*chh
    ~ n = (1-lam)*nuu + lam*nhh

      # capital
    ~ 1 = q*(1 - Phi/2*(i/iLag - 1)**2 - Phi*(i/iLag - 1)*i/iLag) + hhdf*qPrime*Phi*(iPrime/i - 1)*(iPrime/i)**2
    ~ k = (1-delta)*kLag + (1 - Phi/2*(i/iLag - 1)**2)*i

      # "banks"
    ~ ds = qb*b + q*k
    ~ R = (1 + kappa*qbPrime)/qb
    ~ R = Rk
    ~ bprof = ((1+kappa*qb)*bLag + RkLag*qLag*kLag - RLag*ddLag)/pi

      # government spending
    ~ g + (1+kappa*qb)/pi*bLag = qb*b + t
    ~ g = 0.2*ySS
    ~ b = ySS/qbSS

      # clearing conditions
    ~ c + i + g + Phi/2*(i/iLag - 1)**2*i + cap_util_costs*kLag = (1-psi*(pi/pitildeLag - 1)**2/2)*y_prod
    ~ c + i + g = y

      # firms
    ~ cap_util_costs = par_cap_util0*(cap_util - 1) + par_cap_util1/(1-par_cap_util1)/2*(cap_util - 1)**2
    ~ MPK = par_cap_util0 + par_cap_util1/(1-par_cap_util1)*(cap_util - 1)
    ~ MPK = z*alpha*mc*y/(cap_util*kLag)
    ~ q*Rk/piPrime = MPKPrime*cap_utilPrime + (1-delta)*qPrime - cap_util_costs
    ~ w = z*(1-alpha)*mc*y/n
    ~ psi*(pi/pitildeLag - 1)*pi/pitildeLag = (1-theta) + theta*mc + psi*hhdf*(piPrime/pitilde - 1)*piPrime/pitilde*yPrime/y
    ~ pitilde = piSS**omega * pi**(1-omega)
    ~ y_prod = z*(kLag*cap_util)**alpha*n**(1-alpha)

      # monetary policy
    ~ Rn = ((RSS*((pi/piSS)**phi_pi)*((y/ySS)**phi_y))**(1-rho)*RnLag**rho)*v # Taylor rule
    ~ R = max(1, Rn)

      # exogenous processes
    ~ beta = betaSS*(betaLag/betaSS)**rho_beta*exp(e_beta)
    ~ v = vSS*(vLag/vSS)**rho_m*exp(e_m) # Monetary policy shock
    ~ z = zSS*(zLag/zSS)**rho_z*exp(e_z) # Technology shock

steady_state:
    fixed_values:
        # parameters:
        theta: 6.
        kappa: 0.975
        psi: 59.11
        delta: 0.025
        alpha: 0.33
        Phi: 5.6
        phi_pi: 1.5
        phi_y: 0.1
        h: .44
        rho: .8
        eta: .33
        rho_beta: .8
        par_cap_util1: 0.8
        rho_m: .8
        rho_z: .8
        lam: .5
        omega: .44

        # steady state
        beta: 0.98
        hhdf: beta
        pi: 1.02^.25
        R: pi/beta
        Rn: R
        Rk: R
        nuu: .33
        mc: (theta-1)/theta
        q: 1.
        v: 1.
        z: 1.
        pitilde: pi
        cap_util: 1.

    init_guesses: # Use this block to specify initial guesses for root-finding 
    # of steady state
        chi: 1e+1
        MPK: alpha*mc/20
